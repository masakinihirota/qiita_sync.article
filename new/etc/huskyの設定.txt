




# コミット時にコードの検証と自動整形をします。

huskyを入れてcommit時にlint --fixが走るようにします。

pnpm install --save-dev husky lint-staged
pnpm husky install
pnpm pkg set scripts.prepare="husky install"
pnpm husky add .husky/pre-commit "pnpm lint-staged"

※このlint-stagedの設定ではnextjsでlintを実行するとエラーが起きてしまします。



touch .lintstagedrc.js


```.lintstagedrc.js
const path = require('path')

const buildEslintCommand = (filenames) =>
  `next lint --fix --file ${filenames
    .map((f) => path.relative(process.cwd(), f))
    .join(' --file ')}`

module.exports = {
  '*.{ts,tsx}': [
        () => 'tsc --incremental false --noEmit',
        buildEslintCommand,
        "prettier --write"
    ],
}

```


この設定をすると
{.ts,.tsx}ファイルに対してnext lintと prettier
をコミット時に行ってくれます。





huskyの確認

git config --local core.hooksPath
> .husky

git config --local core.hooksPath は、Gitのローカルリポジトリに対して、Gitフックスクリプトのパスを設定するコマンドです。

Gitフックスクリプトは、Gitの特定のイベントが発生したときに自動的に実行されるスクリプトです。例えば、コミットをする前にコードのフォーマットを自動的に修正するスクリプトを実行することができます。


huskyが設定してあると *.stories.tsx ファイルをコミットしようとすると TypeScriptでのコンパイルエラーになります。

そこで*.stories.tsx ファイルをコンパイル時に除外するように設定します。

```tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  // huskeyでは、sotriesファイルでTypeScriptコンパイルエラーが出るので除外する。
  "exclude": ["node_modules", "**/*.stories.ts"]
}

```

