追記 2021-07-07
<details><summary>ふと疑問に思った、App routerでのサーバーコンポーネントとクライアントコンポーネントでのデータフェチとUIについての問題
</summary>

コンポーネントは基本的にデータを受け取ってUIを返すものです。

Next.js 13からは サーバーコンポーネントがデフォルトとなり、データfetchはサーバーコンポーネントがDBから取得したほうが効率が良いとあります。

もう一つのルールとして
"use client"とディレクティブを宣言すると、その節（ルート理論）から下はクライアントコンポーネントとして扱われるとあります。

ここにLayoutのネスト問題が絡んでくると、
1段回目のLayoutでは良いですが、2段階目からのLayoutはクライアントコンポーネントとして扱われてしまうので、データフェッチができなくなってしまいます。




**データフェッチ**は効率を上げるため、サーバーコンポーネント上でfetch関数などを使用することが推奨されています。

一方、**UI**はHooksなどを使用する必要があり、クライアントコンポーネントである必要があります。

そのため、データフェッチ用のサーバーコンポーネントとUI用のクライアントコンポーネントを分離することが強制されています。

データフェッチもクライアントコンポーネントで行うことができますが、それを行う場合、app routerを使用する意味がなくなります。

そこでクライアントコンポーネントの中でもサーバーコンポーネントを使用する方法が必要になります。

その解決策がHoleではないかと思います。

 [hole](## hole)


</details>
追記終了

